package com.nuwarobotics.sdk.sample.tutorial;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.Toast;

import com.nuwarobotics.service.IClientId;
import com.nuwarobotics.service.agent.BnfData;
import com.nuwarobotics.service.agent.NuwaRobotAPI;
import com.nuwarobotics.service.agent.RobotEventListener;
import com.nuwarobotics.service.agent.VoiceEventListener;

import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.List;


public class MainActivity extends Activity implements View.OnClickListener {
    static final String TAG = "xxx_nuwa_sdk";
    LinearLayout mLayout;
    String mTestCases[] = new String[] {
        "wakeup",
        "tts",

        // 缶詰のアクション再生
        "show window",
        "hide window",
        "motion list",
        "play a motion (no face)",
        "play a motion (with face)",
        "stop motion",

        // ASR
        "build grammar 1",
        "build grammar 2",
        "ASR",
        "語音輸入成文字",

        // LED
        "Enable LED control by App",
        "LED on 1(Control by App)",
        "LED on 2(Control by App)",
        "LED off (Control by App)",
        "Enable LED control by Robot",

        // Basic motor control
        "Control mortor 1(20)",
        "Control mortor 1(-20)",
        "Motion reset",

        // Advanced motion control for "control Robot to forward, backwards, turns, stop"
        "Movement control 1",
        "Movement control 2"
    };
    Button mBbs[];
    NuwaRobotAPI mRobot;
    Handler mUI;
    Toast mToast;
    boolean mBuildGrammar;

    // モータ角度範囲
//    float id_1_p = 20;
//    float id_1_n = -20;
//    float id_2_p = 40;
//    float id_2_n = -40;
//    float id_3_p = 5;
//    float id_3_n = -85;
//    float id_4_p = 70;
//    float id_4_n = -200;
//    float id_5_p = 100;
//    float id_5_n = -3;
//    float id_6_p = 0;
//    float id_6_n = -80;
//    float id_7_p = 5;
//    float id_7_n = -85;
//    float id_8_p = 70;
//    float id_8_n = -200;
//    float id_9_p = 100;
//    float id_9_n = -3;
//    float id_10_p = 0;
//    float id_10_n = -80;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        mLayout = (LinearLayout) findViewById(R.id.ll);

        // UI handler
        mUI = new Handler();
        mToast = Toast.makeText(this, "", Toast.LENGTH_SHORT);

        // build test case buttons
        buildBBs();

        // init Nuwa Robot SDK with client_id and app_id which are generated by NUWA develop platform
        //mRobot = new NuwaRobotAPI(this, new IClientId("test_app_1"),
        //        "ba8e6473876d40a48b55214e988226fd", "d5821705-789b-41ab-9280-d017e71d71c9");

        mRobot = new NuwaRobotAPI(this, new IClientId(getPackageName()));

        // register Nuwa Robot Listener
        registerNuwaRobotListener();
    }

    @Override
    protected void onResume() {
        super.onResume();
        hideNavi();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        // release Nuwa Robot SDK resource
        mRobot.release();
    }

    public void hideNavi() {
//        View decorView = getWindow().getDecorView();
//        int uiOptions = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN;
//        decorView.setSystemUiVisibility(uiOptions);
    }

    String LoadData(Context cx, String inFile) {
        String tContents = "";
        try {
            InputStream stream = cx.getAssets().open(inFile);
            int size = stream.available();
            byte[] buffer = new byte[size];
            stream.read(buffer);
            stream.close();
            tContents = new String(buffer);
        } catch (IOException e) {
            // Handle exceptions here
        }

        return tContents;
    }

    void registerNuwaRobotListener() {
        mRobot.registerRobotEventListener(new RobotEventListener() {
            @Override
            public void onWikiServiceStart() {
                // Nuwa Robot SDK is ready now, you call call Nuwa SDK API now.
                Log.d(TAG, "onWikiServiceStart");
                showToast("onWikiServiceStart:");
                mRobot.startTTS("機器人準備好了");

                // to hide overlap window
                mRobot.hideWindow(false);
            }

            @Override
            public void onWikiServiceStop() {
                // TODO Auto-generated method stub
                Log.d(TAG, "onWikiServiceStop");
            }

            @Override
            public void onWikiServiceCrash() {
                // TODO Auto-generated method stub
                Log.d(TAG, "onWikiServiceCrash");
            }

            @Override
            public void onWikiServiceRecovery() {
                // TODO Auto-generated method stub
                Log.d(TAG, "onWikiServiceRecovery");
            }

            @Override
            public void onStartOfMotionPlay(String motion) {
                // TODO Auto-generated method stub
                Log.d(TAG, "onStartOfMotionPlay:" + motion);
                showToast("onStartOfMotionPlay:" + motion);
            }

            @Override
            public void onPauseOfMotionPlay(String motion) {
                // TODO Auto-generated method stub
                Log.d(TAG, "onPauseOfMotionPlay:" + motion);
            }

            @Override
            public void onStopOfMotionPlay(String motion) {
                // TODO Auto-generated method stub
                Log.d(TAG, "onStopOfMotionPlay:" + motion);
                showToast("onStopOfMotionPlay:" + motion);
            }

            @Override
            public void onCompleteOfMotionPlay(String motion) {
                // TODO Auto-generated method stub
                Log.d(TAG, "onCompleteOfMotionPlay:" + motion);
                showToast("onCompleteOfMotionPlay:" + motion);
                mRobot.hideWindow(false); // if your want to hide window after motion playback finished
            }

            @Override
            public void onPlayBackOfMotionPlay(String motion) {
                // TODO Auto-generated method stub
                Log.d(TAG, "onPlayBackOfMotionPlay:" + motion);
            }

            @Override
            public void onErrorOfMotionPlay(int errorcode) {
                // TODO Auto-generated method stub
                Log.d(TAG, "onErrorOfMotionPlay:" + errorcode);

                // can not find the motion file!
                mRobot.hideWindow(false);
            }

            @Override
            public void onPrepareMotion(boolean b, String s, float v) {

            }

            @Override
            public void onCameraOfMotionPlay(String motion) {
                // TODO Auto-generated method stub
                Log.d(TAG, "onCameraOfMotionPlay:" + motion);
            }

            @Override
            public void onGetCameraPose(float x, float y, float z, float Xx, float Yx, float Zx,
                                        float Xy, float Yy, float Zy, float Xz, float Yz, float Zz) {
                // TODO Auto-generated method stub
            }

            @Override
            public void onTouchEvent(int type, int touch) {
                // Touch sensor raw data
                Log.d(TAG, "onTouchEvent:" + type + ", touch:" + touch);
            }

            @Override
            public void onPIREvent(int val) {
                // TODO Auto-generated method stub
                Log.d(TAG, "onPIREvent:" + val);
            }

            @Override
            public void onTap(int body) {
                // Qucik touch
                Log.d(TAG, "onTap:" + body);
            }

            @Override
            public void onLongPress(int body) {
                // Long touch
                Log.d(TAG, "onLongPress:" + body);
            }

            @Override
            public void onWindowSurfaceReady() {
                // TODO Auto-generated method stub
                Log.d(TAG, "onWindowSurfaceReady");
            }

            @Override
            public void onWindowSurfaceDestroy() {
                // TODO Auto-generated method stub
                Log.d(TAG, "onWindowSurfaceDestroy");
            }

            @Override
            public void onTouchEyes(int eyeLR, int type) {
                // TODO Auto-generated method stub
                Log.d(TAG, "onTouchEyes:" + eyeLR + ", type:" + type);
            }

            @Override
            public void onRawTouch(int i, int i1, int i2) {
            }

            @Override
            public void onFaceSpeaker(float direction) {
                // TODO Auto-generated method stub
                Log.d(TAG, "onFaceSpeaker:" + direction);
            }

            @Override
            public void onActionEvent(int i, int i1) {
            }

            @Override
            public void onDropSensorEvent(int i) {
                Log.d(TAG, "onDropSensorEvent:" + i);
            }

            @Override
            public void onMotorErrorEvent(int i, int i1) {
                Log.d(TAG, "onMotorErrorEvent:" + i);
            }
        });

        mRobot.registerVoiceEventListener(new VoiceEventListener() {
            @Override
            public void onWakeup(boolean isError, String score, float direction) {
                Log.d(TAG, "onWakeup:" + !isError + ", score:" + score);
                showToast("onWakeup:" + !isError + ", score:" + score);
            }

            @Override
            public void onTTSComplete(boolean isError) {
                // TODO Auto-generated method stub
                Log.d(TAG, "onTTSComplete" + !isError);
                showToast("onTTSComplete:" + !isError);
            }

            @Override
            public void onSpeechRecognizeComplete(boolean isError, ResultType iFlyResult, String json) {
                // TODO Auto-generated method stub
                Log.d(TAG, "onSpeechRecognizeComplete:" + !isError + ", json:" + json);
                showToast("雲端結果：" + json);
            }

            @Override
            public void onSpeech2TextComplete(boolean isError, String json) {
                // TODO Auto-generated method stub
                Log.d(TAG, "onSpeech2TextComplete:" + !isError + ", json:" + json);
                showToast("語音轉文字(語音輸入法)：" + json);
            }

            @Override
            public void onSpeechState(ListenType type, SpeechState state) {
                // TODO Auto-generated method stub
                Log.d(TAG, "onSpeechState:" + type + ", state:" + state);
            }

            @Override
            public void onMixUnderstandComplete(boolean isError, ResultType iFlyResult, String json) {
                // TODO Auto-generated method stub
                Log.d(TAG, "onMixUnderstandComplete:" + !isError + ", json:" + json);
                if (!isError) {
                    if (iFlyResult == ResultType.LOCAL_COMMAND) {
                        showToast("local ASR:" + json);
                    } else {
                        // cloud result (米大腦)
                        showToast("cloud ASR:" + json);
                    }

                } else {
                    mRobot.startTTS("網路或訊飛不夠力");
                    showToast("網路或訊飛不夠力 " + json);
                }
            }

            @Override
            public void onGrammarState(final boolean isError, String info) {
                // TODO Auto-generated method stub
                Log.d(TAG, "onGrammarState:" + !isError + ", info:" + info);
                mUI.post(new Runnable() {
                    @Override
                    public void run() {
                        if (!isError) {
                            mBuildGrammar = true;
                            showToast("請開始說話");
                            mRobot.startMixUnderstand();
                        } else {
                            mRobot.startTTS("語法建立失敗");
                        }
                    }
                });
            }

            @Override
            public void onListenVolumeChanged(ListenType listenType, int volume) {
                // ASR - user speak volume which is given by IFly engine directly
            }

            @Override
            public void onSpeakState(SpeakType type, SpeakState state) {
                // TODO Auto-generated method stub
                Log.d(TAG, "onSpeakState:" + type + ", state:" + state);
            }
        });
    }

    void buildBBs() {
        mBbs = new Button[mTestCases.length];
        for (int i = 0; i < mTestCases.length; i++) {
            Button b = new Button(this);
            b.setId(i);
            mBbs[i] = b;
            b.setText(mTestCases[i]);
            b.setOnClickListener(this);
            mLayout.addView(new_layout(b, 1));
        }
    }

    LinearLayout new_layout(View v1, float w1) {
        LinearLayout layout = new LinearLayout(this);
        layout.setOrientation(LinearLayout.HORIZONTAL);
        layout.addView(v1, new LinearLayout.LayoutParams(-1, -2, w1));
        return (layout);
    }

    boolean bEnableLEDControllByApp = false;

    @Override
    public void onClick(View v) {
        String tag = mTestCases[v.getId()];
        Log.d(TAG, "test case:" + tag);

        if (tag.equals("wakeup")) {
            showToast("你可以說: 小丹小丹 or 凱比凱比，視機器人端的sku");
            mRobot.startWakeUp(true);
        } else if (tag.equals("tts")) {
            mRobot.startTTS("大家好，我是可愛的小機器人");
        } else if (tag.equals("show window")) {
            mRobot.showWindow(false);
        } else if (tag.equals("hide window")) {
            mRobot.hideWindow(false);
        } else if (tag.equals("motion list")) {
            showMotionList();
        } else if (tag.equals("play a motion (no face)")) {
            hideNavi();
            mRobot.motionPlay("666_IM_Bird", false);
        } else if (tag.equals("play a motion (with face)")) {
            hideNavi();
            mRobot.motionPlay("001_P4_Tutorial010", true);
        } else if (tag.equals("stop motion")) {
            mRobot.motionStop(false);
        } else if (tag.equals("build grammar 1")) {
            mBuildGrammar = false;
            buildGrammar1();
        } else if (tag.equals("build grammar 2")) {
            mBuildGrammar = false;
            buildGrammar2();
        } else if (tag.equals("ASR")) {
            showToast("請開始說話");
            if (mBuildGrammar) {
                // 混合模式，需先建立grammar，
                // 若有本地結果則回傳，否則反回雲端結果
                mRobot.startMixUnderstand();

                // 本地模式，需先建立grammar，
                // 只會回傳本地結果
                //mRobot.startLocalCommand();
            } else {
                // 沒有建立grammar，只能用雲端辯識
                mRobot.startSpeech2Text(false);
            }
        } else if (tag.equals("Enable LED control by App")) {
            // If your App wants to control the LED, app needs to call disableSystemLED() once
            // gain the LED control from system
            mRobot.disableSystemLED();
            bEnableLEDControllByApp = true;
        } else if (tag.equals("LED on 1(Control by App)")) {
            if (bEnableLEDControllByApp) {
                rgb();
            }
        } else if (tag.equals("LED on 2(Control by App)")) {
            if (bEnableLEDControllByApp) {
                rgb2();
            }
        } else if (tag.equals("LED off (Control by App)")) {
            if (bEnableLEDControllByApp) {
                offled();
            }
        } else if (tag.equals("Enable LED control by Robot")) {
            mRobot.enableSystemLED();
            bEnableLEDControllByApp = false;
        } else if (tag.equals("語音輸入成文字")) {
            mRobot.startSpeech2Text(false);
        } else if (tag.equals("Control mortor 1(20)")) {
            mRobot.ctlMotor(1, 0, 20, 40f); // the second param will aleays be zero
        } else if (tag.equals("Control mortor 1(-20)")) {
            mRobot.ctlMotor(1, 0, -20, 40f);
        } else if (tag.equals("Motion reset")) {
            mRobot.motionReset();
        } else if (tag.equals("Movement control 1")) {
            // Need to make sure "移動鎖定 (モバイルロック)" is disable
            mRobot.turnLeftEx();
        } else if (tag.equals("Movement control 2")) {
            mRobot.stopTurnEx();
        }
    }

    void showMotionList() {
        AlertDialog.Builder mPopList = new AlertDialog.Builder(this);
        mPopList.setTitle("Available Motion list");
        mPopList.setNeutralButton("Cancel", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface arg0, int arg1) {
                hideNavi();
            }
        });
        if (mRobot.isKiWiServiceReady()) {
            final List<String> mMotionList = mRobot.getMotionList();
            Collections.sort(mMotionList);
            String[] stringArray = mMotionList.toArray(new String[0]);
            mPopList.setItems(stringArray, new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int which) {
                    hideNavi();
                    String p = mMotionList.get(which);
                    mRobot.motionPlay(p, true);
                }
            });
            mPopList.show();
        } else {
            showToast("Robot service is not ready");
        }
    }

    /*
    Led01_head = 臉部兩側LED燈
    Led02_neck = 胸前LED燈
    Led03_R_hand = 右手LED燈
    Led04_L_hand = 左手LED燈
    */
    void rgb() {
        // turn on LED
        mRobot.enableLed(1, 1); // 頭
        mRobot.enableLed(2, 1); // 胸
        mRobot.enableLed(3, 1); // 右手
        mRobot.enableLed(4, 1); // 左手

        // Set LED color
        mRobot.setLedColor(1, 255, 255, 0, 0);
        mRobot.setLedColor(2, 255, 0, 0, 255);
        mRobot.setLedColor(3, 255, 0, 255, 0);
        mRobot.setLedColor(4, 255, 0, 255, 0);

        // Switch to "Breath mode"
        mRobot.enableLedBreath(1, 2, 9);
        mRobot.enableLedBreath(2, 2, 9);
        mRobot.enableLedBreath(3, 2, 9);
        mRobot.enableLedBreath(4, 2, 9);
    }

    void rgb2() {
        // turn on LED
        mRobot.enableLed(1, 1); // 頭
        mRobot.enableLed(2, 1); // 胸
        mRobot.enableLed(3, 1); // 右手
        mRobot.enableLed(4, 1); // 左手

        // Set LED color
        mRobot.setLedColor(1, 255, 255, 0, 0);
        mRobot.setLedColor(2, 255, 0, 0, 255);
        mRobot.setLedColor(3, 255, 0, 255, 0);
        mRobot.setLedColor(4, 255, 0, 255, 0);
    }

    void offled() {
        // turn off LED
        mRobot.enableLed(1, 0); // 頭
        mRobot.enableLed(2, 0); // 胸
        mRobot.enableLed(3, 0); // 右手
        mRobot.enableLed(4, 0); // 左手
    }

    // 方法一, 程式runtime建立
    void buildGrammar1() {
        BnfData mBnfData = new BnfData("cmd");
        mBnfData.addSlot("fruit", true, 1, "看着我");
        mBnfData.addSlot("fruit", true, 1, "跳一支舞");
        mBnfData.addSlot("fruit", true, 1, "握手");
        mBnfData.addSlot("fruit", true, 1, "拍照");
        mBnfData.addSlot("fruit", true, 1, "超可爱");
        mBnfData.addSlot("fruit", true, 1, "谢谢");
        mBnfData.addSlot("fruit", true, 1, "感谢你");
        mBnfData.addSlot("fruit", true, 1, "对不起");
        mBnfData.addSlot("fruit", true, 1, "我错了");
        mBnfData.addSlot("fruit", true, 1, "再见");
        mBnfData.addSlot("fruit", true, 1, "明天见");
        mBnfData.addSlot("fruit", true, 1, "我在这里");
        mBnfData.addSlot("fruit", true, 1, "这里");
        mBnfData.addSlot("fruit", true, 1, "你今天過得好不好");
        mBnfData.updateBody();
        Log.d(TAG, mBnfData.body);
        mRobot.createCrammer("cmd", mBnfData.body); // 會有callback 回來onGrammarState，之後才能操作ASR
    }

    // 方法二，預先建立grammar file, Ex: command2.bnf
    void buildGrammar2() {
        String grammar = LoadData(this, "command2.bnf");
        Log.d(TAG, grammar);
        mRobot.createCrammer("call", grammar); // PS: "call" should be same as defination in bnf file
    }

    void showToast(final String msg) {
        mUI.post(new Runnable() {
            @Override
            public void run() {
                mToast.setText(msg);
                mToast.show();
            }
        });
    }
}
