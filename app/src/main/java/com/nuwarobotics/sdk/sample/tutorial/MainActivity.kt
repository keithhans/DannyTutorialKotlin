package com.nuwarobotics.sdk.sample.tutorial

import android.app.Activity
import android.app.AlertDialog
import android.content.Context
import android.content.DialogInterface
import android.os.Bundle
import android.os.Handler
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.LinearLayout
import android.widget.Toast
import com.nuwarobotics.service.IClientId
import com.nuwarobotics.service.agent.BnfData
import com.nuwarobotics.service.agent.NuwaRobotAPI
import com.nuwarobotics.service.agent.RobotEventListener
import com.nuwarobotics.service.agent.VoiceEventListener
import com.nuwarobotics.service.agent.VoiceEventListener.ListenType
import com.nuwarobotics.service.agent.VoiceEventListener.ResultType
import com.nuwarobotics.sdk.sample.tutorial.databinding.ActivityMainBinding
import java.io.IOException
import java.io.InputStream

class MainActivity : Activity(), View.OnClickListener {
    companion object {
        private const val TAG = "xxx_nuwa_sdk"
    }

    private lateinit var binding: ActivityMainBinding
    private lateinit var mLayout: LinearLayout
    private val mTestCases = arrayOf(
        "wakeup",
        "tts",
        
        // 缶詰のアクション再生
        "show window",
        "hide window",
        "motion list",
        "play a motion (no face)",
        "play a motion (with face)",
        "stop motion",
        
        // ASR
        "build grammar 1",
        "build grammar 2",
        "ASR",
        "語音輸入成文字",
        
        // LED
        "Enable LED control by App",
        "LED on 1(Control by App)",
        "LED on 2(Control by App)",
        "LED off (Control by App)",
        "Enable LED control by Robot",
        
        // Basic motor control
        "Control mortor 1(20)",
        "Control mortor 1(-20)",
        "Motion reset",
        
        // Advanced motion control for "control Robot to forward, backwards, turns, stop"
        "Movement control 1",
        "Movement control 2"
    )
    
    private lateinit var mBbs: Array<Button>
    private lateinit var mRobot: NuwaRobotAPI
    private lateinit var mUI: Handler
    private lateinit var mToast: Toast
    private var mBuildGrammar: Boolean = false
    private var bEnableLEDControllByApp: Boolean = false

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        mLayout = binding.ll

        // UI handler
        mUI = Handler()
        mToast = Toast.makeText(this, "", Toast.LENGTH_SHORT)

        // build test case buttons
        buildBBs()

        // init Nuwa Robot SDK with client_id and app_id which are generated by NUWA develop platform
        mRobot = NuwaRobotAPI(this, IClientId(packageName))

        // register Nuwa Robot Listener
        registerNuwaRobotListener()
    }

    override fun onResume() {
        super.onResume()
        hideNavi()
    }

    override fun onDestroy() {
        super.onDestroy()
        // release Nuwa Robot SDK resource
        mRobot.release()
    }

    private fun hideNavi() {
        // View decorView = getWindow().getDecorView();
        // int uiOptions = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN;
        // decorView.setSystemUiVisibility(uiOptions);
    }

    private fun loadData(cx: Context, inFile: String): String {
        var tContents = ""
        try {
            val stream = cx.assets.open(inFile)
            val size = stream.available()
            val buffer = ByteArray(size)
            stream.read(buffer)
            stream.close()
            tContents = String(buffer)
        } catch (e: IOException) {
            // Handle exceptions here
        }
        return tContents
    }

    private fun registerNuwaRobotListener() {
        mRobot.registerRobotEventListener(object : RobotEventListener {
            override fun onWikiServiceStart() {
                Log.d(TAG, "onWikiServiceStart")
                showToast("onWikiServiceStart:")
                mRobot.startTTS("機器人準備好了")
                mRobot.hideWindow(false)
            }

            override fun onWikiServiceStop() {
                Log.d(TAG, "onWikiServiceStop")
            }

            override fun onWikiServiceCrash() {
                Log.d(TAG, "onWikiServiceCrash")
            }

            override fun onWikiServiceRecovery() {
                Log.d(TAG, "onWikiServiceRecovery")
            }

            override fun onStartOfMotionPlay(motion: String) {
                Log.d(TAG, "onStartOfMotionPlay:$motion")
                showToast("onStartOfMotionPlay:$motion")
            }

            override fun onPauseOfMotionPlay(motion: String) {
                Log.d(TAG, "onPauseOfMotionPlay:$motion")
            }

            override fun onStopOfMotionPlay(motion: String) {
                Log.d(TAG, "onStopOfMotionPlay:$motion")
                showToast("onStopOfMotionPlay:$motion")
            }

            override fun onCompleteOfMotionPlay(motion: String) {
                Log.d(TAG, "onCompleteOfMotionPlay:$motion")
                showToast("onCompleteOfMotionPlay:$motion")
                mRobot.hideWindow(false)
            }

            override fun onPlayBackOfMotionPlay(motion: String) {
                Log.d(TAG, "onPlayBackOfMotionPlay:$motion")
            }

            override fun onErrorOfMotionPlay(errorcode: Int) {
                Log.d(TAG, "onErrorOfMotionPlay:$errorcode")
                mRobot.hideWindow(false)
            }

            override fun onPrepareMotion(b: Boolean, s: String, v: Float) {
            }

            override fun onCameraOfMotionPlay(motion: String) {
                Log.d(TAG, "onCameraOfMotionPlay:$motion")
            }

            override fun onGetCameraPose(
                x: Float, y: Float, z: Float,
                Xx: Float, Yx: Float, Zx: Float,
                Xy: Float, Yy: Float, Zy: Float,
                Xz: Float, Yz: Float, Zz: Float
            ) {
            }

            override fun onTouchEvent(type: Int, touch: Int) {
                Log.d(TAG, "onTouchEvent:$type, touch:$touch")
            }

            override fun onPIREvent(value: Int) {
                Log.d(TAG, "onPIREvent:$value")
            }

            override fun onTap(body: Int) {
                Log.d(TAG, "onTap:$body")
            }

            override fun onLongPress(body: Int) {
                Log.d(TAG, "onLongPress:$body")
            }

            override fun onWindowSurfaceReady() {
                Log.d(TAG, "onWindowSurfaceReady")
            }

            override fun onWindowSurfaceDestroy() {
                Log.d(TAG, "onWindowSurfaceDestroy")
            }

            override fun onTouchEyes(eyeLR: Int, type: Int) {
                Log.d(TAG, "onTouchEyes:$eyeLR, type:$type")
            }

            override fun onRawTouch(i: Int, i1: Int, i2: Int) {
            }

            override fun onFaceSpeaker(direction: Float) {
                Log.d(TAG, "onFaceSpeaker:$direction")
            }

            override fun onActionEvent(i: Int, i1: Int) {
            }

            override fun onDropSensorEvent(i: Int) {
                Log.d(TAG, "onDropSensorEvent:$i")
            }

            override fun onMotorErrorEvent(i: Int, i1: Int) {
                Log.d(TAG, "onMotorErrorEvent:$i")
            }
        })

        mRobot.registerVoiceEventListener(object : VoiceEventListener {
            override fun onWakeup(isError: Boolean, score: String, direction: Float) {
                Log.d(TAG, "onWakeup:${!isError}, score:$score")
                showToast("onWakeup:${!isError}, score:$score")
            }

            override fun onTTSComplete(isError: Boolean) {
                Log.d(TAG, "onTTSComplete${!isError}")
                showToast("onTTSComplete:${!isError}")
            }

            override fun onSpeechRecognizeComplete(isError: Boolean, iFlyResult: ResultType, json: String) {
                Log.d(TAG, "onSpeechRecognizeComplete:${!isError}, json:$json")
                showToast("雲端結果：$json")
            }

            override fun onSpeech2TextComplete(isError: Boolean, json: String) {
                Log.d(TAG, "onSpeech2TextComplete:${!isError}, json:$json")
                showToast("語音轉文字(語音輸入法)：$json")
            }

            override fun onSpeechState(type: ListenType, state: VoiceEventListener.SpeechState) {
                Log.d(TAG, "onSpeechState:$type, state:$state")
            }

            override fun onMixUnderstandComplete(isError: Boolean, iFlyResult: ResultType, json: String) {
                Log.d(TAG, "onMixUnderstandComplete:${!isError}, json:$json")
                if (!isError) {
                    if (iFlyResult == ResultType.LOCAL_COMMAND) {
                        showToast("local ASR:$json")
                    } else {
                        showToast("cloud ASR:$json")
                    }
                } else {
                    mRobot.startTTS("網路或訊飛不夠力")
                    showToast("網路或訊飛不夠力 $json")
                }
            }

            override fun onGrammarState(isError: Boolean, info: String) {
                Log.d(TAG, "onGrammarState:${!isError}, info:$info")
                mUI.post {
                    if (!isError) {
                        mBuildGrammar = true
                        showToast("請開始說話")
                        mRobot.startMixUnderstand()
                    } else {
                        mRobot.startTTS("語法建立失敗")
                    }
                }
            }

            override fun onListenVolumeChanged(listenType: ListenType, volume: Int) {
            }

            override fun onSpeakState(type: VoiceEventListener.SpeakType, state: VoiceEventListener.SpeakState) {
                Log.d(TAG, "onSpeakState:$type, state:$state")
            }
        })
    }

    private fun buildBBs() {
        mBbs = Array(mTestCases.size) { i ->
            Button(this).apply {
                id = i
                text = mTestCases[i]
                setOnClickListener(this@MainActivity)
            }.also { button ->
                mLayout.addView(newLayout(button, 1f))
            }
        }
    }

    private fun newLayout(v1: View, w1: Float): LinearLayout {
        return LinearLayout(this).apply {
            orientation = LinearLayout.HORIZONTAL
            addView(v1, LinearLayout.LayoutParams(-1, -2, w1))
        }
    }

    private fun showToast(message: String) {
        mToast.setText(message)
        mToast.show()
    }

    override fun onClick(v: View) {
        val tag = mTestCases[v.id]
        Log.d(TAG, "test case:$tag")

        when (tag) {
            "wakeup" -> {
                showToast("你可以說: 小丹小丹 or 凱比凱比，視機器人端的sku")
                mRobot.startWakeUp(true)
            }
            "tts" -> mRobot.startTTS("大家好，我是可愛的小機器人")
            "show window" -> mRobot.showWindow(false)
            "hide window" -> mRobot.hideWindow(false)
            "motion list" -> showMotionList()
            "play a motion (no face)" -> {
                hideNavi()
                mRobot.motionPlay("666_IM_Bird", false)
            }
            "play a motion (with face)" -> {
                hideNavi()
                mRobot.motionPlay("001_P4_Tutorial010", true)
            }
            "stop motion" -> mRobot.motionStop(false)
            "build grammar 1" -> {
                mBuildGrammar = false
                buildGrammar1()
            }
            "build grammar 2" -> {
                mBuildGrammar = false
                buildGrammar2()
            }
            "ASR" -> {
                showToast("請開始說話")
                if (mBuildGrammar) {
                    mRobot.startMixUnderstand()
                } else {
                    mRobot.startSpeech2Text(false)
                }
            }
            "Enable LED control by App" -> {
                mRobot.disableSystemLED()
                bEnableLEDControllByApp = true
            }
            "LED on 1(Control by App)" -> if (bEnableLEDControllByApp) rgb()
            "LED on 2(Control by App)" -> if (bEnableLEDControllByApp) rgb2()
            "LED off (Control by App)" -> if (bEnableLEDControllByApp) offled()
            "Enable LED control by Robot" -> {
                mRobot.enableSystemLED()
                bEnableLEDControllByApp = false
            }
            "語音輸入成文字" -> mRobot.startSpeech2Text(false)
            "Control mortor 1(20)" -> mRobot.ctlMotor(1, 0, 20f, 40f)
            "Control mortor 1(-20)" -> mRobot.ctlMotor(1, 0, -20f, 40f)
            "Motion reset" -> mRobot.motionReset()
            "Movement control 1" -> mRobot.turnLeftEx()
            "Movement control 2" -> mRobot.stopTurnEx()
        }
    }

    private fun showMotionList() {
        AlertDialog.Builder(this).apply {
            setTitle("Available Motion list")
            setNeutralButton("Cancel") { _, _ -> hideNavi() }
            if (mRobot.isKiWiServiceReady) {
                val mMotionList = mRobot.motionList.sorted()
                setItems(mMotionList.toTypedArray()) { _, which ->
                    hideNavi()
                    mRobot.motionPlay(mMotionList[which], true)
                }
                show()
            } else {
                showToast("Robot service is not ready")
            }
        }
    }

    /*
    Led01_head = 臉部兩側LED燈
    Led02_neck = 胸前LED燈
    Led03_R_hand = 右手LED燈
    Led04_L_hand = 左手LED燈
    */
    private fun rgb() {
        // turn on LED
        mRobot.apply {
            enableLed(1, 1) // 頭
            enableLed(2, 1) // 胸
            enableLed(3, 1) // 右手
            enableLed(4, 1) // 左手

            // Set LED color
            setLedColor(1, 255, 255, 0, 0)
            setLedColor(2, 255, 0, 0, 255)
            setLedColor(3, 255, 0, 255, 0)
            setLedColor(4, 255, 0, 255, 0)

            // Switch to "Breath mode"
            enableLedBreath(1, 2, 9)
            enableLedBreath(2, 2, 9)
            enableLedBreath(3, 2, 9)
            enableLedBreath(4, 2, 9)
        }
    }

    private fun rgb2() {
        // turn on LED
        mRobot.apply {
            enableLed(1, 1) // 頭
            enableLed(2, 1) // 胸
            enableLed(3, 1) // 右手
            enableLed(4, 1) // 左手

            // Set LED color
            setLedColor(1, 255, 255, 0, 0)
            setLedColor(2, 255, 0, 0, 255)
            setLedColor(3, 255, 0, 255, 0)
            setLedColor(4, 255, 0, 255, 0)
        }
    }

    private fun offled() {
        // turn off LED
        mRobot.apply {
            enableLed(1, 0) // 頭
            enableLed(2, 0) // 胸
            enableLed(3, 0) // 右手
            enableLed(4, 0) // 左手
        }
    }

    // 方法一, 程式runtime建立
    private fun buildGrammar1() {
        val mBnfData = BnfData("cmd")
        mBnfData.addSlot("fruit", true, 1, "着")
        mBnfData.addSlot("fruit", true, 1, "跳一支舞")
        mBnfData.addSlot("fruit", true, 1, "握手")
        mBnfData.addSlot("fruit", true, 1, "拍照")
        mBnfData.addSlot("fruit", true, 1, "超可爱")
        mBnfData.addSlot("fruit", true, 1, "谢谢")
        mBnfData.updateBody()
        Log.d(TAG, mBnfData.body)
        mRobot.createCrammer("cmd", mBnfData.body)
    }

    // 方法二, 從檔案建立
    private fun buildGrammar2() {
        val grammar = loadData(this, "grammar.txt")
        Log.d(TAG, grammar)
        mRobot.createCrammer("call", grammar)
    }
}